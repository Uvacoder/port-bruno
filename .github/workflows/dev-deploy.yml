# This workflow will build PRs submitted to the main branch.

name: üöÄ [DEV] Deploy

on:
  push:
    branches:
      - dev-001
    paths:
      - "apps/**"
      - "packages/**"
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    name: üöß Build
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ["16.x"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        id: checkout
        uses: actions/checkout@v2.3.3
        with:
          fetch-depth: 2

      - name: üü¢ Setup node
        id: setup-node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: ü•° Setup pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: latest
          run_install: false

      - name: üéà Get pnpm store directory
        id: get-pnpm-cache-dir
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: üîÜ Cache pnpm modules
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.get-pnpm-cache-dir.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üß© Install Dependencies
        id: install-dependencies
        run: pnpm install

      - name: üèóÔ∏è Build
        id: build-the-mono-repo
        run: |
          cd apps/website

          # Set ENV
          touch .env.local
          echo "MAINTENANCE_MODE='false'" >> .env.local
          echo "NEXT_PUBLIC_ENVIRONMENT='DEV'" >> .env.local

          # Disable crawlers
          cd public
          touch robots.txt
          echo "# Block all crawlers for DEV deployment\nUser-agent: *\nDisallow: /" >> robots.txt

          cd ../../..
          pnpm build

  deploy:
    name: üöÄ Deploy
    needs: [build]
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ["16.x"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: üë©‚ÄçüöÄ Start Deployment
        id: deployment
        uses: bobheadxi/deployments@v0.4.3
        with:
          step: start
          token: ${{ env.GITHUB_TOKEN }}
          env: ${{ fromJSON('["Production", "Preview"]')[github.ref != 'refs/heads/main'] }}

      - name: ‚¨áÔ∏è Checkout
        id: checkout
        uses: actions/checkout@v2.3.3
        with:
          fetch-depth: 2
          token: ${{ env.GITHUB_TOKEN }}

      - name: üü¢ Setup node
        id: setup-node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: ü•° Setup pnpm
        id: setup-pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: latest
          run_install: false

      - name: üéà Get pnpm store directory
        id: get-pnpm-cache-dir
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: üîÜ Cache pnpm modules
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.get-pnpm-cache-dir.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üß© Install Dependencies
        id: install-dependencies
        run: pnpm install

      - name: üèóÔ∏è Build
        id: build-the-mono-repo
        run: |
          cd apps/website

          # Set ENV
          touch .env.local
          echo "MAINTENANCE_MODE='false'" >> .env.local
          echo "NEXT_PUBLIC_ENVIRONMENT='DEV'" >> .env.local

          # Disable crawlers
          cd public
          touch robots.txt
          echo "# Block all crawlers for DEV deployment\nUser-agent: *\nDisallow: /" >> robots.txt

          cd ../../..
          pnpm build

      - name: ‚ñ≤ Deploy to Vercel
        id: deploy-to-vercel
        uses: amondnet/vercel-action@v20.0.1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: ${{ fromJSON('["--development", ""]')[github.ref != 'refs/heads/main'] }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          scope: ${{ secrets.VERCEL_ORG_ID}}
          working-directory: ./
          alias-domains: |
            dev.brionmario.com

      - name: üèÅ Finish Deployment
        id: finish-deployment
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          token: ${{ env.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
